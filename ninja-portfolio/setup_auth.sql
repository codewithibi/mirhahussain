-- Enable email authentication in Supabase
-- Run this in your Supabase SQL Editor

-- Create server function for getting server time (used in test script)
create or replace function get_server_time()
returns timestamptz as $$
  select now();
$$ language sql;

-- Create a secure profile table linked to auth users
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade not null primary key,
  email text not null,
  full_name text,
  avatar_url text,
  role text not null check (role in ('admin', 'user')) default 'user',
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

-- Enable RLS on profiles
alter table public.profiles enable row level security;

-- Create policy for profiles
create policy "Users can view their own profile"
  on profiles for select
  using (auth.uid() = id);

create policy "Users can update their own profile"
  on profiles for update
  using (auth.uid() = id);

create policy "Admin users can view all profiles"
  on profiles for select
  using (exists (
    select 1 from profiles
    where id = auth.uid() and role = 'admin'
  ));

-- Create a trigger to automatically create a profile when a user signs up
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, full_name, role)
  values (
    new.id, 
    new.email, 
    coalesce(new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'name', 'User'),
    'user'
  );
  return new;
end;
$$ language plpgsql security definer;

-- Create the trigger
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create function to promote user to admin
create or replace function promote_to_admin(user_email text)
returns text as $$
declare
  target_user_id uuid;
begin
  -- Find the user ID
  select id into target_user_id from auth.users where email = user_email;
  
  if target_user_id is null then
    return 'User not found';
  end if;
  
  -- Update the user's role to admin
  update public.profiles
  set role = 'admin'
  where id = target_user_id;
  
  return 'User promoted to admin';
end;
$$ language plpgsql security definer;

-- Create contact_messages table if it doesn't exist
create table if not exists public.contact_messages (
    id bigint generated by default as identity primary key,
    name text not null,
    email text not null,
    subject text not null,
    message text not null,
    created_at timestamptz default timezone('utc', now()) not null,
    read boolean default false
);

-- Enable RLS on contact_messages
alter table public.contact_messages enable row level security;

-- Add RLS policy for contact_messages to allow anonymous submissions
create policy "Anyone can insert messages"
  on contact_messages for insert
  with check (true);

-- Add RLS policy for contact_messages to allow admin access
create policy "Admin users can read all messages"
  on contact_messages for select
  using (exists (
    select 1 from profiles
    where id = auth.uid() and role = 'admin'
  ));

create policy "Admin users can update messages"
  on contact_messages for update
  using (exists (
    select 1 from profiles
    where id = auth.uid() and role = 'admin'
  ));

create policy "Admin users can delete messages"
  on contact_messages for delete
  using (exists (
    select 1 from profiles
    where id = auth.uid() and role = 'admin'
  ));

-- Instructions:
-- After running this SQL, you need to:
-- 1. Go to Authentication > Settings > Email Auth in your Supabase Dashboard
-- 2. Make sure "Enable Email Signup" is turned on
-- 3. Configure your redirect URLs (e.g., https://yoursite.com/auth.html)
-- 4. Create a new user using the auth.html page or the setup_admin.js script
-- 5. To promote a user to admin, run this SQL:
--    SELECT promote_to_admin('your-email@example.com'); 